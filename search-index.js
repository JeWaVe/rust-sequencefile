var searchIndex = {};
searchIndex['sequencefile'] = {"items":[[0,"","sequencefile","Prototype streaming library for reading Hadoop sequencefiles",null,null],[3,"Header","","Sequencefile header, metadata about the file, e.g. key/value types, version, compression\nand some internal state for properly decoding",null,null],[12,"version","","Sequencefile version\nVersion 4 - block compression\nVersion 5 - custom compression codecs\nVersion 6 - metadata",0,null],[12,"compression_type","","Type of value compression",0,null],[12,"compression_codec","","Codec, if any",0,null],[12,"key_class","","Fully-qualified Java class of key Writable",0,null],[12,"value_class","","Fully-qualified Java class of value Writable",0,null],[12,"metadata","","K-V metadata on sequencefile",0,null],[4,"Codec","","Compression codec",null,null],[13,"Default","","Deflate is default",1,null],[13,"Gzip","","Gzip, standard",1,null],[13,"Bzip2","","Bzip2 compression",1,null],[4,"CompressionType","","Type of compression used on the sequencefile.",null,null],[13,"None","","No compression.",2,null],[13,"Record","","Record-level compression, for each k-v pair, the value is compressed.",2,null],[13,"Block","","Block-level compression, many k-v pairs are compressed into a single block\nThis mode is recommended for the best compression characteristics.",2,null],[11,"clone","","",2,{"inputs":[{"name":"compressiontype"}],"output":{"name":"compressiontype"}}],[11,"eq","","",2,{"inputs":[{"name":"compressiontype"},{"name":"compressiontype"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"compressiontype"},{"name":"compressiontype"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"compressiontype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"codec"}],"output":{"name":"codec"}}],[11,"eq","","",1,{"inputs":[{"name":"codec"},{"name":"codec"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"codec"},{"name":"codec"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"codec"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"reader","","Implementation and structs for a sequencefile reader",null,null],[3,"Reader","sequencefile::reader","Provides a streaming interface fronted by an Iterator\nOnly buffers when `CompressionType::Block` is used.",null,null],[12,"header","","Sequencefile header",3,null],[11,"fmt","","",3,{"inputs":[{"name":"reader"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new Reader from an io::Read",3,{"inputs":[{"name":"reader"},{"name":"r"}],"output":{"name":"result"}}],[11,"next","","",3,{"inputs":[{"name":"reader"}],"output":{"name":"option"}}],[6,"ByteString","sequencefile","Convenience typedef",null,null],[11,"fmt","","",0,{"inputs":[{"name":"header"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Header"],[4,"Codec"],[4,"CompressionType"],[3,"Reader"]]};
initSearch(searchIndex);
